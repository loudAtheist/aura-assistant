import os, json, re, logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import speech_recognition as sr
from pydub import AudioSegment
from openai import OpenAI

from db import (
    init_db, get_conn, get_all_lists, get_list_tasks, add_task, delete_list,
    mark_task_done, delete_task, restore_task, find_list, fetch_task, fetch_list_by_task
)

# ========= ENV =========
dotenv_path = Path(__file__).resolve().parent / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path)
    print(f"[INFO] .env loaded from {dotenv_path}")
else:
    print(f"[WARNING] .env not found at {dotenv_path}")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
TEMP_DIR = os.getenv("TEMP_DIR", "/opt/aura-assistant/tmp")
os.makedirs(TEMP_DIR, exist_ok=True)

# ========= LOG =========
logging.basicConfig(
    filename="/opt/aura-assistant/aura.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

client = OpenAI(api_key=OPENAI_API_KEY)

# ========= PROMPT (Semantic Core) =========
SEMANTIC_PROMPT = """
–¢—ã ‚Äî Aura, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Entity System).

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–Ω–∏–º–∞—Ç—å —Å–º—ã—Å–ª –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á—ë—Ç–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —Å—É—â–Ω–æ—Å—Ç—è–º–∏: —Å–ø–∏—Å–∫–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏, –∑–∞–º–µ—Ç–∫–∞–º–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –∏–¥–µ—è–º–∏.

Aura –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —è–∑—ã–∫ –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:
- –≤—ã—è—Å–Ω–∏, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å;
- –æ–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è;
- —Å—Ñ–æ—Ä–º–∏—Ä—É–π –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π, –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º JSON.

–¢—ã –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–ª–æ–≤–∞, —Ç—ã —É–ª–∞–≤–ª–∏–≤–∞–µ—à—å —Å–º—ã—Å–ª –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.  
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç ¬´–≤—Å—ë¬ª, ¬´—Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ¬ª, ¬´–ø–æ–¥—Ä–æ–±–Ω–æ¬ª ‚Äî –∑–Ω–∞—á–∏—Ç, –æ–Ω —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —Å–ø–∏—Å–∫–∏ —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏).  
–ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç ¬´–Ω–∞–¥–æ¬ª, ¬´—Ö–æ—á—É¬ª, ¬´–Ω–∞–ø–æ–º–Ω–∏¬ª, ¬´—É–±–µ—Ä–∏¬ª, ¬´–¥–æ–±–∞–≤—å¬ª, ¬´–ø–æ–∫–∞–∂–∏¬ª, ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (—Å–æ–∑–¥–∞—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å, –ø–æ–∫–∞–∑–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å, –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º, –Ω–∞–ø–æ–º–Ω–∏—Ç—å).

Aura –ø–æ–º–Ω–∏—Ç, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ entities, –≥–¥–µ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç —Ç–∏–ø (list, task, note, reminder) –∏ —Å–≤—è–∑–∏ parent_id.  
–î–µ–π—Å—Ç–≤–∏—è –≤ JSON –æ–ø–∏—Å—ã–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

---
–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
Aura –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç–∞–º–∏, –æ—Ç—Ä–∞–∂–∞—é—â–∏–º–∏ –ø–æ–Ω—è—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.  
–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{
  "action": "create|add_task|show_lists|show_tasks|delete_task|mark_done|update_task|move_entity|unknown",
  "entity_type": "list|task|note|reminder",
  "list": "<–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞>",
  "task": "<—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>",
  "title": "<–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—É—â–Ω–æ—Å—Ç–∏>",
  "meta": { ... }
}

–ï—Å–ª–∏ —Å–º—ã—Å–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π ‚Äî –≤–µ—Ä–Ω–∏ { "action": "unknown" }.

---
Aura ‚Äî –Ω–µ —á–∞—Ç –∏ –Ω–µ –±–æ—Ç, –∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è.  –ï—ë –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –∞ –Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏.
"""

# ========= Helpers =========
def extract_json_blocks(s: str):
    try:
        data = json.loads(s)
        if isinstance(data, list):
            return data
        elif isinstance(data, dict):
            return [data]
    except Exception:
        pass
    blocks = re.findall(r'\{[^{}]*\{[^{}]*\}[^{}]*\}|\{[^{}]+\}', s, re.DOTALL)
    if not blocks:
        blocks = re.findall(r'\{[^{}]+\}', s, re.DOTALL)
    out = []
    for b in blocks:
        try:
            out.append(json.loads(b))
        except Exception:
            logging.warning(f"Skip invalid JSON block: {b[:120]}")
    return out

# ========= FIXED user_id logic =========
async def route_actions(update: Update, actions: list, user_id: int | None = None):
    conn = get_conn()
    if user_id is None:
        try:
            user_id = update.effective_user.id if update and update.effective_user else 0
        except Exception:
            user_id = 0

    for obj in actions:
        action = obj.get("action", "unknown")
        entity_type = obj.get("entity_type")
        list_name = obj.get("list")
        task = obj.get("task") or obj.get("title")

        if action == "create" and entity_type == "list" and list_name:
            try:
                from db import create_list
                create_list(conn, user_id, list_name)
                await update.message.reply_text(f"üÜï –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ *{list_name}*", parse_mode="Markdown")
            except Exception as e:
                logging.exception(f"Create list error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫.")

        elif action == "add_task" and list_name and task:
            try:
                add_task(conn, user_id, list_name, task)
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{task}* –≤ —Å–ø–∏—Å–æ–∫ *{list_name}*", parse_mode="Markdown")
            except Exception as e:
                logging.exception(f"Add task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

        elif action == "show_lists":
            try:
                lists = get_all_lists(conn, user_id)
                if lists:
                    txt = "\n".join([f"üìã {n}" for n in lists])
                    await update.message.reply_text(f"üóÇ –¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:\n{txt}")
                else:
                    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ üïä")
            except Exception as e:
                logging.exception(f"Show lists error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏.")

        elif action == "show_tasks" and list_name:
            try:
                items = get_list_tasks(conn, user_id, list_name)
                if items:
                    txt = "\n".join([f"‚Ä¢ {t}" for t in items])
                    await update.message.reply_text(f"üìã *{list_name}:*\n{txt}", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ *{list_name}* –ø—É—Å—Ç.", parse_mode="Markdown")
            except Exception as e:
                logging.exception(f"Show tasks error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.")

        elif action == "delete_task" and list_name and task:
            try:
                n = delete_task(conn, user_id, list_name, task)
                await update.message.reply_text("üóë –£–¥–∞–ª–µ–Ω–æ." if n else "–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
            except Exception as e:
                logging.exception(f"Delete task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.")

        elif action == "mark_done" and list_name and task:
            try:
                n = mark_task_done(conn, user_id, list_name, task)
                await update.message.reply_text("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ." if n else "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É.")
            except Exception as e:
                logging.exception(f"Mark done error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.")

        else:
            await update.message.reply_text("ü§î –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.")

# ========= Handlers =========
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE, input_text: str | None = None):
    user_id = update.effective_user.id if update and update.effective_user else 0
    text = (input_text or update.message.text or "").strip()
    logging.info(f"üì© Text from {user_id}: {text}")

    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SEMANTIC_PROMPT},
                {"role": "user", "content": text}
            ],
        )
        raw = resp.choices[0].message.content.strip()
        logging.info(f"ü§ñ RAW: {raw}")
        with open("/opt/aura-assistant/openai_raw.log", "a", encoding="utf-8") as f:
            f.write(f"\n=== RAW ({user_id}) ===\n{raw}\n")

        actions = extract_json_blocks(raw)
        if not actions:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.")
            return
        await route_actions(update, actions, user_id)

    except Exception as e:
        logging.exception(f"‚ùå handle_text error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update and update.effective_user else 0
    logging.info(f"üéô Voice from {user_id}")
    try:
        vf = await update.message.voice.get_file()
        ogg = os.path.join(TEMP_DIR, f"{user_id}_voice.ogg")
        wav = os.path.join(TEMP_DIR, f"{user_id}_voice.wav")
        await vf.download_to_drive(ogg)
        AudioSegment.from_ogg(ogg).export(wav, format="wav")

        r = sr.Recognizer()
        with sr.AudioFile(wav) as src:
            audio = r.record(src)
            text = r.recognize_google(audio, language="ru-RU")

        logging.info(f"üó£ ASR: {text}")
        await update.message.reply_text(f"üó£ {text}")

        await handle_text(update, context, input_text=text)

        try:
            os.remove(ogg)
            os.remove(wav)
        except Exception:
            pass

    except Exception as e:
        logging.exception(f"‚ùå voice error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(CallbackQueryHandler(handle_callback))
    logging.info("üöÄ Aura v5.0.1 started.")
    app.run_polling()

if __name__ == "__main__":
    main()
