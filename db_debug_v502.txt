import sqlite3, json, os, datetime

DB_PATH = "/opt/aura-assistant/db.sqlite3"
LOG_PATH = "/opt/aura-assistant/db_debug.log"

def db_log(msg):
    """–ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª."""
    ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(f"[{ts}] {msg}\n")

ENTITIES_DDL = """
CREATE TABLE IF NOT EXISTS entities (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  type TEXT NOT NULL,
  title TEXT,
  content TEXT,
  parent_id INTEGER,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP,
  meta TEXT,
  UNIQUE(user_id, type, title, parent_id)
);
"""

def get_conn():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_conn()
    with conn:
        conn.execute(ENTITIES_DDL)
    conn.close()
    db_log("‚úÖ init_db() –ø—Ä–æ–≤–µ—Ä–∏–ª–∞/—Å–æ–∑–¥–∞–ª–∞ —Ç–∞–±–ª–∏—Ü—É entities")

# ---------- Entity Layer ----------
def _get_or_create_list(conn, user_id, list_name):
    db_log(f"‚û°Ô∏è _get_or_create_list user={user_id} list='{list_name}'")
    cur = conn.cursor()
    cur.execute("""SELECT id FROM entities
                   WHERE user_id=? AND type='list' AND title=? LIMIT 1""",
                (user_id, list_name))
    row = cur.fetchone()
    if row:
        db_log(f"‚ÑπÔ∏è  —Å–ø–∏—Å–æ–∫ '{list_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (id={row[0]})")
        return row[0]
    cur.execute("""INSERT INTO entities (user_id, type, title)
                   VALUES (?, 'list', ?)""",
                (user_id, list_name))
    conn.commit()
    db_log(f"üÜï —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ '{list_name}' –¥–ª—è user={user_id}")
    return cur.lastrowid

def create_list(conn, user_id, list_name):
    db_log(f"‚û°Ô∏è create_list user={user_id} list='{list_name}'")
    _get_or_create_list(conn, user_id, list_name)
    conn.commit()

def find_list(conn, user_id, list_name):
    cur = conn.cursor()
    cur.execute("""SELECT id, title FROM entities
                   WHERE user_id=? AND type='list' AND title=? LIMIT 1""",
                (user_id, list_name))
    return cur.fetchone()

def get_all_lists(conn, user_id):
    db_log(f"‚û°Ô∏è get_all_lists user={user_id}")
    cur = conn.cursor()
    cur.execute("""SELECT title FROM entities
                   WHERE user_id=? AND type='list'
                   ORDER BY created_at ASC""",
                (user_id,))
    rows = cur.fetchall()
    return [row["title"] for row in rows]

def add_task(conn, user_id, list_name, task_title):
    db_log(f"‚û°Ô∏è add_task user={user_id} list='{list_name}' task='{task_title}'")
    list_id = _get_or_create_list(conn, user_id, list_name)
    cur = conn.cursor()
    cur.execute("""INSERT OR IGNORE INTO entities
                   (user_id, type, title, parent_id, meta)
                   VALUES (?, 'task', ?, ?, ?)""",
                (user_id, task_title, list_id, json.dumps({"status": "open"}, ensure_ascii=False)))
    conn.commit()
    db_log(f"‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_title}' ‚Üí —Å–ø–∏—Å–æ–∫ '{list_name}' (list_id={list_id})")
    return cur.lastrowid

def get_list_tasks(conn, user_id, list_name):
    db_log(f"‚û°Ô∏è get_list_tasks user={user_id} list='{list_name}'")
    cur = conn.cursor()
    cur.execute("""SELECT id FROM entities
                   WHERE user_id=? AND type='list' AND title=? LIMIT 1""",
                (user_id, list_name))
    row = cur.fetchone()
    if not row:
        db_log("‚ö†Ô∏è —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ get_list_tasks()")
        return []
    list_id = row["id"]
    cur.execute("""SELECT title FROM entities
                   WHERE user_id=? AND type='task' AND parent_id=?
                   ORDER BY created_at ASC""",
                (user_id, list_id))
    tasks = [r["title"] for r in cur.fetchall()]
    db_log(f"üìã –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ '{list_name}'")
    return tasks

def mark_task_done(conn, user_id, list_name, task_title):
    db_log(f"‚û°Ô∏è mark_task_done user={user_id} list='{list_name}' task='{task_title}'")
    cur = conn.cursor()
    cur.execute("""SELECT id FROM entities
                   WHERE user_id=? AND type='list' AND title=? LIMIT 1""",
                (user_id, list_name))
    row = cur.fetchone()
    if not row:
        db_log("‚ö†Ô∏è —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0
    list_id = row["id"]
    cur.execute("""SELECT id, meta FROM entities
                   WHERE user_id=? AND type='task' AND parent_id=? AND title=? LIMIT 1""",
                (user_id, list_id, task_title))
    task = cur.fetchone()
    if not task:
        db_log("‚ö†Ô∏è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 0
    meta = {}
    if task["meta"]:
        try:
            meta = json.loads(task["meta"])
        except:
            meta = {}
    meta["status"] = "done"
    cur.execute("""UPDATE entities SET meta=? WHERE id=?""",
                (json.dumps(meta, ensure_ascii=False), task["id"]))
    conn.commit()
    db_log(f"‚úîÔ∏è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è '{task_title}'")
    return cur.rowcount
