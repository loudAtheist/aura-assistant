import os, json, re, logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import speech_recognition as sr
from pydub import AudioSegment
from openai import OpenAI

from db import (
    init_db, get_conn, get_all_lists, get_list_tasks, add_task, delete_list,
    mark_task_done, delete_task, restore_task, find_list, fetch_task, fetch_list_by_task,
    delete_task_fuzzy  # NEW
)

# ========= ENV =========
dotenv_path = Path(__file__).resolve().parent / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path)
    print(f"[INFO] .env loaded from {dotenv_path}")
else:
    print(f"[WARNING] .env not found at {dotenv_path}")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
TEMP_DIR = os.getenv("TEMP_DIR", "/opt/aura-assistant/tmp")
os.makedirs(TEMP_DIR, exist_ok=True)

# ========= LOG =========
logging.basicConfig(
    filename="/opt/aura-assistant/aura.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

client = OpenAI(api_key=OPENAI_API_KEY)

# ========= DIALOG CONTEXT (per-user) =========
SESSION: dict[int, dict] = {}   # { user_id: {"last_action": str, "last_list": str} }

def set_ctx(user_id: int, **kw):
    sess = SESSION.get(user_id, {})
    sess.update({k:v for k,v in kw.items() if v})
    SESSION[user_id] = sess

def get_ctx(user_id: int, key: str, default=None):
    return SESSION.get(user_id, {}).get(key, default)

# ========= PROMPT (Semantic Core) =========
SEMANTIC_PROMPT = """
–¢—ã ‚Äî Aura, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (Entity System). –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø–æ–Ω–∏–º–∞—Ç—å —Å–º—ã—Å–ª —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –±–∞–∑–æ–π, –¥–µ–π—Å—Ç–≤—É—è –∫–∞–∫ –º—ã—Å–ª—è—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –∞ –Ω–µ –∫–∞–∫ –ø–∞—Ä—Å–µ—Ä.

---
üß† –¢–≤–æ—è —Ä–æ–ª—å:
–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –æ–±–ª–∞–¥–∞—é—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º. –¢—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ—Ç–æ–∫ —Å–º—ã—Å–ª–æ–≤, –Ω–µ –∫–∞–∫ –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥. –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º —Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å:
1. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5‚Äì10 —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞).
2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã (—Å–ø–∏—Å–∫–∏, –∑–∞–¥–∞—á–∏, –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è).
3. –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —á—Ç–æ –æ–Ω *—Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å*, –∞ –Ω–µ *—á—Ç–æ —Å–∫–∞–∑–∞–ª –±—É–∫–≤–∞–ª—å–Ω–æ*.

–¢—ã –Ω–µ –∏—â–µ—à—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç—ã —Ä–∞—Å—Å—É–∂–¥–∞–µ—à—å –æ —Ü–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞.

---
üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π:
- –í—Å–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ —Å—É—â–Ω–æ—Å—Ç–∏ (entities) —Å —Ç–∏–ø–∞–º–∏ list, task, note, reminder.
- –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å, —É–¥–∞–ª—è—Ç—å, –æ—Ç–º–µ—á–∞—Ç—å, –∏—Å–∫–∞—Ç—å –∏ —Å–≤—è–∑—ã–≤–∞—Ç—å —ç—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –Ω–µ—è–≤–Ω–æ (¬´–¥–æ–±–∞–≤—å —Ç—É–¥–∞¬ª, ¬´—É–±–µ—Ä–∏ —ç—Ç–æ¬ª), —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: active_list, active_task, –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
- –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å clarify —Å —É—Ç–æ—á–Ω—è—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

---
üß© –¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:
1. **–ü–æ–Ω–∏–º–∞–π —Ü–µ–ª—å, –Ω–µ —Å–ª–æ–≤–∞.** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å ¬´—è —Å–¥–µ–ª–∞–ª¬ª –∏–ª–∏ ¬´–≥–æ—Ç–æ–≤–æ¬ª ‚Äî —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å, —á—Ç–æ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
2. **–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é.** –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –≥–æ–≤–æ—Ä–∏–ª–∏ –æ —Å–ø–∏—Å–∫–µ ¬´–ü–æ–∫—É–ø–∫–∏¬ª, —Ç–æ ¬´–¥–æ–±–∞–≤—å —Ç—É–¥–∞¬ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–µ–º—É.
3. **–î–µ–π—Å—Ç–≤—É–π –±–µ—Ä–µ–∂–Ω–æ.** –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª–µ–Ω ‚Äî —É—Ç–æ—á–Ω–∏ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º.
4. **–ù–µ –ø–∏—à–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.** –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ç–æ—á–Ω—ã–π JSON, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.
5. **–°–∞–º –≤—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ.** –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–º—ã—Å–ª–∞ —Ä–µ—à–∞–π, —á—Ç–æ —ç—Ç–æ: —Å–æ–∑–¥–∞—Ç—å, –ø–æ–∫–∞–∑–∞—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Ç.–¥.
6. **–ú—ã—à–ª–µ–Ω–∏–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏.** –ï—Å–ª–∏ —Ç—ã –Ω–µ –≤–∏–¥–∏—à—å –ø—Ä—è–º–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ–¥—É–º–∞–π: —á—Ç–æ –±–ª–∏–∂–µ –ø–æ —Å–º—ã—Å–ª—É? (–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫—É–ø–ª–µ–Ω–æ¬ª ~ ¬´–≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª.)

---
üì¶ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "action": "create|add_task|show_lists|show_tasks|mark_done|delete_task|update_task|move_entity|convert_entity|search_entity|clarify|unknown",
  "entity_type": "list|task|note|reminder",
  "list": "<–Ω–∞–∑–≤–∞–Ω–∏–µ>",
  "task": "<—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ>",
  "meta": {
    "context_used": true,
    "reasoning": true,
    "context_trace": ["–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ—Ä–∞–∑—ã"],
    "confidence": 0.0-1.0,
    "question": "<–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ>"
  }
}

---
üí¨ –ü—Ä–∏–º–µ—Ä—ã –º—ã—à–ª–µ–Ω–∏—è:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–î–æ–±–∞–≤—å —Ç—É–¥–∞ —Ö–ª–µ–±¬ª ‚Üí –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–∏—à—å, —á—Ç–æ —Ä–µ—á—å —à–ª–∞ –æ —Å–ø–∏—Å–∫–µ ¬´–ü–æ–∫—É–ø–∫–∏¬ª ‚Üí —Å–æ–∑–¥–∞—ë—à—å add_task –≤ –Ω—ë–º.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–ö–∞—Ä—Ç–æ—à–∫–∞ –∏ –º–æ–ª–æ–∫–æ –∫—É–ø–ª–µ–Ω—ã¬ª ‚Üí –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á, –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–º—ã—Å–ª—É –∏ –º–µ–Ω—è–µ—à—å —Å—Ç–∞—Ç—É—Å –Ω–∞ done.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–ü–æ–∫–∞–∂–∏ –≤—Å—ë¬ª ‚Üí –≤—ã–≤–æ–¥–∏—à—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–£–¥–∞–ª–∏—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É¬ª ‚Üí —Å–º–æ—Ç—Ä–∏—à—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—à—å, –≤—ã–ø–æ–ª–Ω—è–µ—à—å delete_task —Å meta.by_index=2.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–£–¥–∞–ª–∏ —ç—Ç–æ¬ª –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å clarify.

---
‚öôÔ∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
- –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π –¥–µ–π—Å—Ç–≤–∏–µ.
- –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —É–≤–µ—Ä–µ–Ω ‚Äî –¥–æ–±–∞–≤—å –ø–æ–ª–µ confidence < 1.0 –∏ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤–æ–≤—Å–µ ‚Äî –≤–µ—Ä–Ω–∏ clarify.

---
üéõÔ∏è –°—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è:
- –ê–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π, –Ω–∞–±–ª—é–¥–∞—é—â–∏–π.
- –ü—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è, –∏—Å—Ö–æ–¥—è –∏–∑ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –±—É–∫–≤–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
- –ù–µ —à–∞–±–ª–æ–Ω–Ω—ã–π ‚Äî —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å, –Ω–æ –æ–±—è–∑–∞–Ω –≤—Å–µ–≥–¥–∞ –≤—ã–¥–∞–≤–∞—Ç—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π JSON.
"""

# ========= Helpers =========
def extract_json_blocks(s: str):
    try:
        data = json.loads(s)
        if isinstance(data, list): return data
        if isinstance(data, dict): return [data]
    except Exception:
        pass
    blocks = re.findall(r'\{[^{}]*\{[^{}]*\}[^{}]*\}|\{[^{}]+\}', s, re.DOTALL)
    if not blocks:
        blocks = re.findall(r'\{[^{}]+\}', s, re.DOTALL)
    out = []
    for b in blocks:
        try:
            out.append(json.loads(b))
        except Exception:
            logging.warning(f"Skip invalid JSON block: {b[:120]}")
    return out

def wants_expand(text: str) -> bool:
    return bool(re.search(r'\b(–≤—Å–µ|–≤—Å—ë|—Ä–∞–∑–≤–µ—Ä–Ω—É|–ø–æ–¥—Ä–æ–±–Ω)\w*', (text or "").lower()))

def text_mentions_list_and_name(text: str):
    m = re.search(r'(?:—Å–ø–∏—Å–æ–∫|–ª–∏—Å—Ç)\s+([^\n\r]+)$', (text or "").strip(), re.IGNORECASE)
    if m:
        name = m.group(1).strip(" .!?:;¬´¬ª'\"").strip()
        return name
    return None

async def expand_all_lists(update: Update, conn, user_id: int):
    lists = get_all_lists(conn, user_id)
    if not lists:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ üïä")
        return
    await update.message.reply_text("üóÇ –¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:\n" + "\n".join([f"üìã {n}" for n in lists]))
    for n in lists:
        items = get_list_tasks(conn, user_id, n)
        if items:
            txt = "\n".join([f"‚Ä¢ {t}" for t in items])
        else:
            txt = "‚Äî –ø—É—Å—Ç–æ ‚Äî"
        await update.message.reply_text(f"üìã {n}:\n{txt}")
    set_ctx(user_id, last_action="show_lists")

async def route_actions(update: Update, actions: list, user_id: int, original_text: str):
    conn = get_conn()
    for obj in actions:
        action = obj.get("action", "unknown")
        entity_type = obj.get("entity_type")
        list_name = obj.get("list") or get_ctx(user_id, "last_list")
        task = obj.get("task") or obj.get("title")

        # CONTEXT FALLBACKS
        if action in ("unknown", None):
            # –ü–æ—Å—Ç-–∫–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞ "–≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ"
            if wants_expand(original_text) and get_ctx(user_id, "last_action") == "show_lists":
                await expand_all_lists(update, conn, user_id)
                continue

            # "—Ä–∞–∑–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ <–∏–º—è>" / "–≤—ã–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ <–∏–º—è>"
            name_from_text = text_mentions_list_and_name(original_text)
            if name_from_text:
                list_name = name_from_text
                action = "show_tasks"

        # ROUTING
        if action == "create" and entity_type == "list" and obj.get("list"):
            try:
                from db import create_list
                create_list(conn, user_id, obj["list"])
                await update.message.reply_text(f"üÜï –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ *{obj['list']}*", parse_mode="Markdown")
                set_ctx(user_id, last_action="create_list", last_list=obj["list"])
            except Exception as e:
                logging.exception(f"Create list error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫.")

        elif action == "add_task" and list_name and task:
            try:
                add_task(conn, user_id, list_name, task)
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{task}* –≤ —Å–ø–∏—Å–æ–∫ *{list_name}*", parse_mode="Markdown")
                set_ctx(user_id, last_action="add_task", last_list=list_name)
            except Exception as e:
                logging.exception(f"Add task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

        elif action == "show_lists":
            try:
                if wants_expand(original_text) or (obj.get("meta") or {}).get("expand"):
                    await expand_all_lists(update, conn, user_id)
                else:
                    lists = get_all_lists(conn, user_id)
                    if lists:
                        txt = "\n".join([f"üìã {n}" for n in lists])
                        await update.message.reply_text(f"üóÇ –¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:\n{txt}")
                    else:
                        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ üïä")
                set_ctx(user_id, last_action="show_lists")
            except Exception as e:
                logging.exception(f"Show lists error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏.")

        elif action == "show_tasks" and list_name:
            try:
                items = get_list_tasks(conn, user_id, list_name)
                if items:
                    txt = "\n".join([f"‚Ä¢ {t}" for t in items])
                    await update.message.reply_text(f"üìã *{list_name}:*\n{txt}", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ *{list_name}* –ø—É—Å—Ç.", parse_mode="Markdown")
                set_ctx(user_id, last_action="show_tasks", last_list=list_name)
            except Exception as e:
                logging.exception(f"Show tasks error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.")

        elif action == "delete_task":
            try:
                # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É (–Ω–µ—á—ë—Ç–∫–æ) –∏/–∏–ª–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ø–∏—Å–∫—É
                q = (task or original_text or "").strip()
                ln = list_name or get_ctx(user_id, "last_list")
                if not ln:
                    await update.message.reply_text("–£—Ç–æ—á–Ω–∏, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–∏—Ç—å.")
                    continue
                deleted, matched = delete_task_fuzzy(conn, user_id, ln, q)
                if deleted:
                    await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: *{matched}* –∏–∑ *{ln}*", parse_mode="Markdown")
                else:
                    await update.message.reply_text("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
                set_ctx(user_id, last_action="delete_task", last_list=ln)
            except Exception as e:
                logging.exception(f"Delete task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.")

        elif action == "mark_done" and list_name and task:
            try:
                n = mark_task_done(conn, user_id, list_name, task)
                await update.message.reply_text("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ." if n else "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É.")
                set_ctx(user_id, last_action="mark_done", last_list=list_name)
            except Exception as e:
                logging.exception(f"Mark done error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.")

        else:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: ¬´—Ä–∞–∑–≤–µ—Ä–Ω–∏¬ª/¬´–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ <–∏–º—è>¬ª –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if wants_expand(original_text) and get_ctx(user_id, "last_action") == "show_lists":
                await expand_all_lists(update, conn, user_id)
            else:
                name_from_text = text_mentions_list_and_name(original_text)
                if name_from_text:
                    items = get_list_tasks(conn, user_id, name_from_text)
                    if items:
                        txt = "\n".join([f"‚Ä¢ {t}" for t in items])
                        await update.message.reply_text(f"üìã *{name_from_text}:*\n{txt}", parse_mode="Markdown")
                        set_ctx(user_id, last_action="show_tasks", last_list=name_from_text)
                        continue
                await update.message.reply_text("ü§î –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.")

# ========= Handlers =========
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE, input_text: str | None = None):
    user_id = update.effective_user.id
    text = (input_text or update.message.text or "").strip()
    logging.info(f"üì© Text from {user_id}: {text}")

    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SEMANTIC_PROMPT},
                {"role": "user", "content": text}
            ],
        )
        raw = resp.choices[0].message.content.strip()
        logging.info(f"ü§ñ RAW: {raw}")
        try:
            with open("/opt/aura-assistant/openai_raw.log", "a", encoding="utf-8") as f:
                f.write(f"\n=== RAW ({user_id}) ===\n{text}\n{raw}\n")
        except Exception:
            pass

        actions = extract_json_blocks(raw)
        if not actions:
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã (¬´–≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ¬ª, ¬´—Ä–∞–∑–≤–µ—Ä–Ω–∏¬ª)
            if wants_expand(text) and get_ctx(user_id, "last_action") == "show_lists":
                conn = get_conn()
                await expand_all_lists(update, conn, user_id)
                return
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.")
            return

        await route_actions(update, actions, user_id, text)

    except Exception as e:
        logging.exception(f"‚ùå handle_text error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"üéô Voice from {user_id}")
    try:
        vf = await update.message.voice.get_file()
        ogg = os.path.join(TEMP_DIR, f"{user_id}_voice.ogg")
        wav = os.path.join(TEMP_DIR, f"{user_id}_voice.wav")
        await vf.download_to_drive(ogg)
        AudioSegment.from_ogg(ogg).export(wav, format="wav")

        r = sr.Recognizer()
        with sr.AudioFile(wav) as src:
            audio = r.record(src)
            text = r.recognize_google(audio, language="ru-RU")

        logging.info(f"üó£ ASR: {text}")
        await update.message.reply_text(f"üó£ {text}")

        await handle_text(update, context, input_text=text)

        try:
            os.remove(ogg); os.remove(wav)
        except Exception:
            pass

    except Exception as e:
        logging.exception(f"‚ùå voice error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(CallbackQueryHandler(handle_callback))
    logging.info("üöÄ Aura v6.6 started.")
    app.run_polling()

if __name__ == "__main__":
    main()
