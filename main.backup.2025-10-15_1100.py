import os, json, re, logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import speech_recognition as sr
from pydub import AudioSegment
from openai import OpenAI
from datetime import datetime, timedelta

from db import (
    rename_list, normalize_text, init_db, get_conn, get_all_lists, get_list_tasks, add_task, delete_list,
    mark_task_done, mark_task_done_fuzzy, delete_task, restore_task, find_list, fetch_task, fetch_list_by_task,
    delete_task_fuzzy, delete_task_by_index, convert_entity, create_list, move_entity, get_all_tasks, update_user_profile, get_user_profile, get_completed_tasks
)

# ========= ENV =========
dotenv_path = Path(__file__).resolve().parent / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path)
    print(f"[INFO] .env loaded from {dotenv_path}")
else:
    print(f"[WARNING] .env not found at {dotenv_path}")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
TEMP_DIR = os.getenv("TEMP_DIR", "/opt/aura-assistant/tmp")
os.makedirs(TEMP_DIR, exist_ok=True)

# ========= LOG =========
logging.basicConfig(
    filename="/opt/aura-assistant/aura.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

client = OpenAI(api_key=OPENAI_API_KEY)

# ========= DIALOG CONTEXT (per-user) =========
SESSION: dict[int, dict] = {}   # { user_id: {"last_action": str, "last_list": str, "history": [str]} }

def set_ctx(user_id: int, **kw):
    sess = SESSION.get(user_id, {"history": [], "last_list": None, "last_action": None, "pending_delete": None})
    sess.update({k:v for k,v in kw.items() if v is not None})
    if "history" in kw and isinstance(kw["history"], list):
        sess["history"] = kw["history"][-10:]  # Limit to 10 messages
    SESSION[user_id] = sess
    logging.info(f"Updated context for user {user_id}: {sess}")

def get_ctx(user_id: int, key: str, default=None):
    return SESSION.get(user_id, {"history": [], "last_list": None, "last_action": None, "pending_delete": None}).get(key, default)

# ========= PROMPT (Semantic Core) =========
SEMANTIC_PROMPT = """
–¢—ã ‚Äî Aura, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç —Å–º—ã—Å–ª —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π Entity System (—Å–ø–∏—Å–∫–∏, –∑–∞–¥–∞—á–∏). –¢—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –∫–∞–∫ –∂–∏–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—à—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, —à—É—Ç–∏—à—å –∫ –º–µ—Å—Ç—É, –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ –≤—Å–µ–≥–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—à—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ.

üß† –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å
‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—É–º–∞–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º: 1) –ö–∞–∫–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ? 2) –ö–∞–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫, –∏—Å—Ç–æ—Ä–∏—è)? 3) –ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞—Ç—å?
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–Ω—Ç–µ–∫—Å—Ç: {history}) –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã (db_state: {db_state}).
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–æ—Ä–æ–¥, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è): {user_profile}.
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç ¬´—Ç—É–¥–∞¬ª, ¬´–≤ –Ω–µ–≥–æ¬ª, ¬´—ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫¬ª ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–ø–æ–º—è–Ω—É—Ç—ã–π —Å–ø–∏—Å–æ–∫ (db_state.last_list –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—è).
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (e.g., ¬´–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞¬ª –≤–∞–∂–Ω–µ–µ last_list).
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ ¬´–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ>¬ª ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ (action: show_tasks, list: <–Ω–∞–∑–≤–∞–Ω–∏–µ>).
‚Ä¢ –†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å/–æ—Ç–º–µ—Ç–∏—Ç—å/–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏/–Ω–∞–π—Ç–∏/—É—Ç–æ—á–Ω–∏—Ç—å/—Å–∫–∞–∑–∞—Ç—å/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å/–ø—Ä–æ—Ñ–∏–ª—å/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
‚Ä¢ –ï—Å–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞ (–ø—Ä–∏–≤–µ—Ç, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, ¬´–∫–∞–∫ –¥–µ–ª–∞?¬ª) ‚Äî action: say.
‚Ä¢ –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω ‚Äî action: clarify —Å –≤–æ–ø—Ä–æ—Å–æ–º.
‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑—É–π –≤—Ö–æ–¥ (—Ä–µ–≥–∏—Å—Ç—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –æ—à–∏–±–∫–∏ —Ä–µ—á–∏), –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å–º—ã—Å–ª.

üß© –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ JSON; –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON)
‚Äî –î–ª—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –±–∞–∑–æ–π:
{{ "action": "create|add_task|show_lists|show_tasks|show_all_tasks|mark_done|delete_task|delete_list|move_entity|convert_entity|search_entity|rename_list|update_profile|restore_task|unknown",
"entity_type": "list|task|user_profile",
"list": "–∏–º—è —Å–ø–∏—Å–∫–∞",
"task": "–∏–º—è –∑–∞–¥–∞—á–∏",
"to_list": "—Ü–µ–ª–µ–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞",
"tasks": ["—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"],
"meta": {{ "context_used": true, "by_index": 1, "question": "—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "reason": "–ø—Ä–∏—á–∏–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è", "city": "–≥–æ—Ä–æ–¥", "profession": "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è" }} }}
‚Äî –î–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
{{ "action": "say", "text": "–∫–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç", "meta": {{ "tone": "friendly", "context_used": true }} }}
‚Äî –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:
{{ "action": "clarify", "meta": {{ "question": "–≤–µ–∂–ª–∏–≤—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "context_used": true }} }}

üéõÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –°–º—ã—Å–ª –≤–∞–∂–Ω–µ–µ —Å–ª–æ–≤: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: ¬´—Ç—É–¥–∞/—Ç–∞–º/–≤ –Ω–µ–≥–æ¬ª ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ db_state.last_list.
‚Ä¢ –ü–æ–∑–∏—Ü–∏–∏: ¬´–ø–µ—Ä–≤—É—é/–≤—Ç–æ—Ä—É—é¬ª ‚Äî meta.by_index (1‚Ä¶; -1 = –ø–æ—Å–ª–µ–¥–Ω—è—è).
‚Ä¢ –ú–∞—Ä–∫–µ—Ä—ã –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ (¬´–≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª, ¬´—Å–¥–µ–ª–∞–Ω–æ¬ª) ‚Äî mark_done —Å fuzzy-–ø–æ–∏—Å–∫–æ–º.
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏ ‚Äî action: say.
‚Ä¢ –¢–æ–ª—å–∫–æ JSON.

üåê –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ
–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ ¬´–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –†–∞–±–æ—Ç–∞ –≤–Ω–µ—Å–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å—Ö–æ–¥–∏—Ç—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏¬ª ‚Üí {{ "action": "create", "entity_type": "list", "list": "–†–∞–±–æ—Ç–∞", "tasks": ["–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "–°—Ö–æ–¥–∏—Ç—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É", "–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–ö—É–ø–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏"] }}
‚Ä¢ ¬´–ü–µ—Ä–µ–Ω–µ—Å–∏ –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞¬ª ‚Üí {{ "action": "move_entity", "entity_type": "task", "title": "–ö—É–ø–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏", "list": "<–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫>", "to_list": "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞" }}
‚Ä¢ ¬´–ò–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞ –ø—É–Ω–∫—Ç –°–¥–µ–ª–∞—Ç—å —É–±–æ—Ä–∫—É –≤ –≥–∞—Ä–∞–∂–µ –ü–µ—Ä–µ–Ω–µ—Å–∏ –≤ –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞¬ª ‚Üí {{ "action": "move_entity", "entity_type": "task", "title": "–°–¥–µ–ª–∞—Ç—å —É–±–æ—Ä–∫—É –≤ –≥–∞—Ä–∞–∂–µ", "list": "–†–∞–±–æ—Ç–∞", "to_list": "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞" }}
‚Ä¢ ¬´–°—Ö–æ–¥–∏—Ç—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É –≤—ã–ø–æ–ª–Ω–µ–Ω-–∫–æ–Ω–µ—Ü¬ª ‚Üí {{ "action": "mark_done", "entity_type": "task", "list": "<–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫>", "task": "–°—Ö–æ–¥–∏—Ç—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É" }}
‚Ä¢ ¬´–í–Ω–µ—Å–∏ —Å–¥–∞—Ç—å –∫–æ–≤–µ—Ä –≤ —á–∏—Å—Ç–∫—É –≤ –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞¬ª ‚Üí {{ "action": "add_task", "entity_type": "task", "list": "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞", "task": "–°–¥–∞—Ç—å –∫–æ–≤–µ—Ä –≤ —á–∏—Å—Ç–∫—É" }}
‚Ä¢ ¬´–ü–æ–∫–∞–∂–∏ –≤—Å–µ –º–æ–∏ –¥–µ–ª–∞¬ª ‚Üí {{ "action": "show_all_tasks", "entity_type": "task" }}
‚Ä¢ ¬´–Ø –∂–∏–≤—É –≤ –ê–ª–º–∞—Ç—ã, —Ä–∞–±–æ—Ç–∞—é –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö¬ª ‚Üí {{ "action": "update_profile", "entity_type": "user_profile", "meta": {{ "city": "–ê–ª–º–∞—Ç—ã", "profession": "–ø—Ä–æ–¥–∞–∂–∏" }} }}
‚Ä¢ ¬´–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–¥–∞—á—É –°—Ö–æ–¥–∏—Ç—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É –≤ —Å–ø–∏—Å–æ–∫ –†–∞–±–æ—Ç–∞¬ª ‚Üí {{ "action": "restore_task", "entity_type": "task", "list": "–†–∞–±–æ—Ç–∞", "task": "–°—Ö–æ–¥–∏—Ç—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É" }}
"""

# ========= Helpers =========
def extract_json_blocks(s: str):
    try:
        data = json.loads(s)
        if isinstance(data, list): return [data[0]]  # Take first JSON to avoid duplicates
        if isinstance(data, dict): return [data]
    except Exception:
        pass
    blocks = re.findall(r'\{[^{}]*\{[^{}]*\}[^{}]*\}|\{[^{}]+\}', s, re.DOTALL)
    if not blocks:
        blocks = re.findall(r'\{[^{}]+\}', s, re.DOTALL)
    out = []
    for b in blocks:
        try:
            out.append(json.loads(b))
        except Exception:
            logging.warning(f"Skip invalid JSON block: {b[:120]}")
    return out[:1]  # Limit to one action to avoid duplicates

def wants_expand(text: str) -> bool:
    return bool(re.search(r'\b(—Ä–∞–∑–≤–µ—Ä–Ω—É|–ø–æ–¥—Ä–æ–±–Ω)\w*', (text or "").lower()))

def text_mentions_list_and_name(text: str):
    m = re.search(r'(?:—Å–ø–∏—Å–æ–∫|–ª–∏—Å—Ç)\s+([^\n\r]+)$', (text or "").strip(), re.IGNORECASE)
    if m:
        name = m.group(1).strip(" .!?:;¬´¬ª'\"").strip()
        return name
    return None

async def send_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏", "–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫"], ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, selective=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏/—Å–∫–∞–∂–∏:", reply_markup=reply_markup)

async def expand_all_lists(update: Update, conn, user_id: int):
    lists = get_all_lists(conn, user_id)
    if not lists:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ üïä")
        return
    txt = "üóÇ –¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:\n"
    for n in lists:
        txt += f"üìã *{n}*:\n"
        items = get_list_tasks(conn, user_id, n)
        if items:
            txt += "\n".join([f"{i}. {t}" for i, t in items])
        else:
            txt += "‚Äî –ø—É—Å—Ç–æ ‚Äî"
        txt += "\n"
    await update.message.reply_text(txt, parse_mode="Markdown")
    set_ctx(user_id, last_action="show_lists")

async def route_actions(update: Update, actions: list, user_id: int, original_text: str):
    conn = get_conn()
    logging.info(f"Processing actions: {json.dumps(actions)}")
    for obj in actions:
        action = obj.get("action", "unknown")
        entity_type = obj.get("entity_type")
        list_name = obj.get("list") or get_ctx(user_id, "last_list")
        task = obj.get("task") or obj.get("title")
        meta = obj.get("meta", {})
        logging.info(f"Action: {action}, Entity: {entity_type}, List: {list_name}, Task: {task}")

        if list_name == "<–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫>":
            list_name = get_ctx(user_id, "last_list")
            logging.info(f"Resolved placeholder to last_list: {list_name}")
            if not list_name:
                logging.warning("No last_list in context, asking for clarification")
                await update.message.reply_text("ü§î –£—Ç–æ—á–Ω–∏, –≤ –∫–∞–∫–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")
                await send_menu(update, context)
                continue

        if action in ("unknown", None):
            if wants_expand(original_text) and get_ctx(user_id, "last_action") == "show_lists":
                await expand_all_lists(update, conn, user_id)
                continue
            name_from_text = text_mentions_list_and_name(original_text)
            if name_from_text:
                list_name = name_from_text
                action = "show_tasks"
                logging.info(f"Fallback to show_tasks for list: {list_name}")

        if action == "create" and entity_type == "list" and obj.get("list"):
            try:
                logging.info(f"Creating list: {obj['list']}")
                create_list(conn, user_id, obj["list"])
                if obj.get("tasks"):
                    for t in obj["tasks"]:
                        add_task(conn, user_id, obj["list"], t)
                    await update.message.reply_text(f"üÜï –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ *{obj['list']}* —Å –∑–∞–¥–∞—á–∞–º–∏: {', '.join(obj['tasks'])}", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"üÜï –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ *{obj['list']}*", parse_mode="Markdown")
                set_ctx(user_id, last_action="create_list", last_list=obj["list"])
            except Exception as e:
                logging.exception(f"Create list error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "add_task" and list_name and task:
            try:
                logging.info(f"Adding task: {task} to list: {list_name}")
                task_id = add_task(conn, user_id, list_name, task)
                if task_id:
                    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{task}* –≤ —Å–ø–∏—Å–æ–∫ *{list_name}*", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ *{task}* —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ *{list_name}*.")
                set_ctx(user_id, last_action="add_task", last_list=list_name)
            except Exception as e:
                logging.exception(f"Add task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "show_lists":
            try:
                logging.info("Showing all lists with tasks")
                lists = get_all_lists(conn, user_id)
                if not lists:
                    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ üïä")
                    set_ctx(user_id, last_action="show_lists")
                    continue
                txt = "üóÇ –¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:\n"
                for n in lists:
                    txt += f"üìã *{n}*:\n"
                    items = get_list_tasks(conn, user_id, n)
                    if items:
                        txt += "\n".join([f"{i}. {t}" for i, t in items])
                    else:
                        txt += "‚Äî –ø—É—Å—Ç–æ ‚Äî"
                    txt += "\n"
                await update.message.reply_text(txt, parse_mode="Markdown")
                set_ctx(user_id, last_action="show_lists")
            except Exception as e:
                logging.exception(f"Show lists error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "show_tasks" and list_name:
            try:
                logging.info(f"Showing tasks for list: {list_name}")
                items = get_list_tasks(conn, user_id, list_name)
                if items:
                    txt = "\n".join([f"{i}. {t}" for i, t in items])
                    await update.message.reply_text(f"üìã *{list_name}:*\n{txt}", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ *{list_name}* –ø—É—Å—Ç.", parse_mode="Markdown")
                set_ctx(user_id, last_action="show_tasks", last_list=list_name)
            except Exception as e:
                logging.exception(f"Show tasks error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "show_all_tasks":
            try:
                logging.info("Showing all tasks")
                lists = get_all_lists(conn, user_id)
                if not lists:
                    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª üïä")
                    set_ctx(user_id, last_action="show_all_tasks")
                    continue
                txt = "üóÇ –í—Å–µ —Ç–≤–æ–∏ –¥–µ–ª–∞:\n"
                for n in lists:
                    txt += f"üìã *{n}*:\n"
                    items = get_list_tasks(conn, user_id, n)
                    if items:
                        txt += "\n".join([f"{i}. {t}" for i, t in items])
                    else:
                        txt += "‚Äî –ø—É—Å—Ç–æ ‚Äî"
                    txt += "\n"
                await update.message.reply_text(txt, parse_mode="Markdown")
                set_ctx(user_id, last_action="show_all_tasks")
            except Exception as e:
                logging.exception(f"Show all tasks error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–ª–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "delete_task":
            try:
                ln = list_name or get_ctx(user_id, "last_list")
                if not ln:
                    logging.info("No list name provided for delete_task")
                    await update.message.reply_text("ü§î –£—Ç–æ—á–Ω–∏, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–∏—Ç—å.")
                    await send_menu(update, context)
                    continue
                if meta.get("by_index"):
                    logging.info(f"Deleting task by index: {meta['by_index']} in list: {ln}")
                    deleted, matched = delete_task_by_index(conn, user_id, ln, meta["by_index"])
                else:
                    logging.info(f"Deleting task fuzzy: {task} in list: {ln}")
                    deleted, matched = delete_task_fuzzy(conn, user_id, ln, task)
                if deleted:
                    await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: *{matched}* –∏–∑ *{ln}*", parse_mode="Markdown")
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                set_ctx(user_id, last_action="delete_task", last_list=ln)
            except Exception as e:
                logging.exception(f"Delete task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "delete_list" and entity_type == "list" and list_name:
            try:
                if get_ctx(user_id, "pending_delete") == list_name:
                    if "–¥–∞" in original_text.lower():
                        deleted = delete_list(conn, user_id, list_name)
                        if deleted:
                            await update.message.reply_text(f"üóë –°–ø–∏—Å–æ–∫ *{list_name}* —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown")
                            set_ctx(user_id, last_action="delete_list", last_list=None, pending_delete=None)
                        else:
                            await update.message.reply_text(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ *{list_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return
                    elif "–Ω–µ—Ç" in original_text.lower():
                        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
                        set_ctx(user_id, pending_delete=None)
                        return
                else:
                    await update.message.reply_text(f"ü§î –£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ *{list_name}*? (–î–∞/–ù–µ—Ç)")
                    set_ctx(user_id, pending_delete=list_name)
                    return
            except Exception as e:
                logging.exception(f"Delete list error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
                set_ctx(user_id, pending_delete=None)

        elif action == "mark_done" and list_name and task:
            try:
                logging.info(f"Marking task done: {task} in list: {list_name}")
                deleted, matched = mark_task_done_fuzzy(conn, user_id, list_name, task)
                if deleted:
                    await update.message.reply_text(f"‚úîÔ∏è –ì–æ—Ç–æ–≤–æ: *{matched}*.", parse_mode="Markdown")
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É.")
                set_ctx(user_id, last_action="mark_done", last_list=list_name)
            except Exception as e:
                logging.exception(f"Mark done error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "rename_list" and entity_type == "list" and list_name and task:
            try:
                logging.info(f"Renaming list: {list_name} to {task}")
                renamed = rename_list(conn, user_id, list_name, task)
                if renamed:
                    await update.message.reply_text(f"üÜï –°–ø–∏—Å–æ–∫ *{list_name}* –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ *{task}*.", parse_mode="Markdown")
                    set_ctx(user_id, last_action="rename_list", last_list=task)
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ *{list_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ *{task}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            except Exception as e:
                logging.exception(f"Rename list error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "move_entity" and entity_type and obj.get("title") and obj.get("list") and obj.get("to_list"):
            try:
                logging.info(f"Moving {entity_type} '{obj['title']}' from {obj['list']} to {obj['to_list']}")
                list_exists = find_list(conn, user_id, obj["list"])
                to_list_exists = find_list(conn, user_id, obj["to_list"])
                if not list_exists:
                    await update.message.reply_text(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ *{obj['list']}* –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue
                if not to_list_exists:
                    logging.info(f"Creating target list '{obj['to_list']}' for user {user_id}")
                    create_list(conn, user_id, obj["to_list"])
                updated = move_entity(conn, user_id, entity_type, obj["title"], obj["list"], obj["to_list"])
                if updated:
                    await update.message.reply_text(f"üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: *{obj['title']}* –≤ *{obj['to_list']}*.", parse_mode="Markdown")
                    set_ctx(user_id, last_action="move_entity", last_list=obj["to_list"])
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å *{obj['title']}*. –ü—Ä–æ–≤–µ—Ä—å, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞.")
            except Exception as e:
                logging.exception(f"Move entity error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "convert_entity" and list_name and task and meta.get("new_type"):
            try:
                logging.info(f"Converting task: {task} to {meta['new_type']} in list: {list_name}")
                n = convert_entity(conn, user_id, list_name, task, meta["new_type"])
                if n:
                    await update.message.reply_text(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: *{task}* –≤ *{meta['new_type']}*.", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å *{task}*.")
                set_ctx(user_id, last_action="convert_entity", last_list=list_name)
            except Exception as e:
                logging.exception(f"Convert entity error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "update_profile" and entity_type == "user_profile" and meta:
            try:
                logging.info(f"Updating user profile for user {user_id}: {meta}")
                update_user_profile(conn, user_id, meta.get("city"), meta.get("profession"))
                await update.message.reply_text("üÜô –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="Markdown")
            except Exception as e:
                logging.exception(f"Update profile error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "restore_task" and entity_type == "task" and list_name and task:
            try:
                logging.info(f"Restoring task: {task} in list: {list_name}")
                restored = restore_task(conn, user_id, list_name, task)
                if restored:
                    await update.message.reply_text(f"üîÑ –ó–∞–¥–∞—á–∞ *{task}* –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ *{list_name}*.", parse_mode="Markdown")
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å *{task}*.")
                set_ctx(user_id, last_action="restore_task", last_list=list_name)
            except Exception as e:
                logging.exception(f"Restore task error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "say" and obj.get("text"):
            try:
                logging.info(f"Say: {obj['text']}")
                await update.message.reply_text(obj.get("text"))
            except Exception as e:
                logging.exception(f"Say error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        elif action == "clarify" and meta.get("question"):
            try:
                logging.info(f"Clarify: {meta['question']}")
                await update.message.reply_text("ü§î " + meta.get("question"))
                await send_menu(update, context)
            except Exception as e:
                logging.exception(f"Clarify error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

        else:
            name_from_text = text_mentions_list_and_name(original_text)
            if name_from_text:
                logging.info(f"Showing tasks for list from text: {name_from_text}")
                items = get_list_tasks(conn, user_id, name_from_text)
                if items:
                    txt = "\n".join([f"{i}. {t}" for i, t in items])
                    await update.message.reply_text(f"üìã *{name_from_text}:*\n{txt}", parse_mode="Markdown")
                    set_ctx(user_id, last_action="show_tasks", last_list=name_from_text)
                    continue
                await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ *{name_from_text}* –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            logging.info("Unknown command, no context match")
            await update.message.reply_text("ü§î –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.")
            await send_menu(update, context)
        logging.info(f"User {user_id}: {original_text} -> Action: {action}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE, input_text: str | None = None):
    user_id = update.effective_user.id
    text = (input_text or update.message.text or "").strip()
    logging.info(f"üì© Text from {user_id}: {text}")

    try:
        conn = get_conn()
        db_state = {
            "lists": {n: [t for _, t in get_list_tasks(conn, user_id, n)] for n in get_all_lists(conn, user_id)},
            "last_list": get_ctx(user_id, "last_list")
        }
        history = get_ctx(user_id, "history", [])
        user_profile = get_user_profile(conn, user_id)
        prompt = SEMANTIC_PROMPT.format(history=json.dumps(history[-10:], ensure_ascii=False), 
                                       db_state=json.dumps(db_state, ensure_ascii=False),
                                       user_profile=json.dumps(user_profile, ensure_ascii=False))
        logging.info(f"Sending to OpenAI: {text}")
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": text}
            ],
        )
        raw = resp.choices[0].message.content.strip()
        logging.info(f"ü§ñ RAW: {raw}")
        try:
            with open("/opt/aura-assistant/openai_raw.log", "a", encoding="utf-8") as f:
                f.write(f"\n=== RAW ({user_id}) ===\n{text}\n{raw}\n")
        except Exception:
            logging.warning("Failed to write to openai_raw.log")

        actions = extract_json_blocks(raw)
        if not actions:
            if wants_expand(text) and get_ctx(user_id, "last_action") == "show_lists":
                logging.info("No actions, but expanding lists due to context")
                await expand_all_lists(update, conn, user_id)
                return
            logging.warning("No valid JSON actions from OpenAI")
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.")
            await send_menu(update, context)
            return

        await route_actions(update, actions, user_id, text)
        set_ctx(user_id, history=history + [text])

    except Exception as e:
        logging.exception(f"‚ùå handle_text error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
        await send_menu(update, context)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"üéô Voice from {user_id}")
    try:
        vf = await update.message.voice.get_file()
        ogg = os.path.join(TEMP_DIR, f"{user_id}_voice.ogg")
        wav = os.path.join(TEMP_DIR, f"{user_id}_voice.wav")
        await vf.download_to_drive(ogg)
        AudioSegment.from_ogg(ogg).export(wav, format="wav")

        r = sr.Recognizer()
        with sr.AudioFile(wav) as src:
            audio = r.record(src)
            text = r.recognize_google(audio, language="ru-RU")
            text = normalize_text(text)

        logging.info(f"üó£ ASR: {text}")
        await update.message.reply_text(f"üó£ {text}")

        await handle_text(update, context, input_text=text)

        try:
            os.remove(ogg); os.remove(wav)
        except Exception:
            pass

    except Exception as e:
        logging.exception(f"‚ùå voice error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
        await send_menu(update, context)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(CallbackQueryHandler(handle_callback))
    logging.info("üöÄ Aura v5.1 started.")
    app.run_polling()

if __name__ == "__main__":
    main()
