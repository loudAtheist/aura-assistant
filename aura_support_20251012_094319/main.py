import os
import json
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import speech_recognition as sr
from pydub import AudioSegment
from openai import OpenAI

from db import (
    init_db, get_conn, get_all_lists, get_list_tasks, add_task, delete_list,
    mark_task_done, delete_task, restore_task, find_list, fetch_task, fetch_list_by_task
)

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –°–†–ï–î–´ ==================
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
TEMP_DIR = os.getenv("TEMP_DIR", "/opt/aura-assistant/tmp")
os.makedirs(TEMP_DIR, exist_ok=True)

# ================== –õ–û–ì–ò ==================
logging.basicConfig(
    filename="/opt/aura-assistant/aura.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ================== –ö–õ–ò–ï–ù–¢ ==================
client = OpenAI(api_key=OPENAI_API_KEY)

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í ==================
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    logging.info(f"üì© Text from {user_id}: {text}")

    try:
        system_prompt = """
–¢—ã ‚Äî Aura Assistant, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:
{
  "action": "add_task",
  "list": "–†–∞–±–æ—Ç–∞",
  "task": "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
}
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–µ—Ä–Ω–∏:
{ "action": "unknown" }
        """

        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
        )

        raw_reply = response.choices[0].message.content.strip()
        logging.info(f"ü§ñ RAW reply: {raw_reply}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON-–æ—Ç–≤–µ—Ç–∞
        if not raw_reply.startswith("{"):
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.")
            return

        data = json.loads(raw_reply)
        action = data.get("action", "unknown")
        task = data.get("task")
        list_name = data.get("list")

        conn = get_conn()

        # === –î–ï–ô–°–¢–í–ò–Ø ===
        if action == "add_task" and list_name and task:
            add_task(conn, user_id, list_name, task)
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{task}* –≤ —Å–ø–∏—Å–æ–∫ *{list_name}*", parse_mode="Markdown")

        elif action == "show_lists":
            lists = get_all_lists(conn, user_id)
            if lists:
                formatted = "\n".join([f"üìã {name}" for name in lists])
                await update.message.reply_text(f"üóÇ –¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:\n{formatted}")
            else:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ üïä")

        elif action == "show_tasks" and list_name:
            tasks = get_list_tasks(conn, user_id, list_name)
            if tasks:
                formatted = "\n".join([f"‚Ä¢ {t}" for t in tasks])
                await update.message.reply_text(f"üìã *{list_name}:*\n{formatted}", parse_mode="Markdown")
            else:
                await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ *{list_name}* –ø—É—Å—Ç.", parse_mode="Markdown")

        elif action == "unknown":
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü—Ä–∏–º–µ—Ä: ¬´—Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –†–∞–±–æ—Ç–∞¬ª.")

        else:
            await update.message.reply_text("ü§î –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.")

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–ê ==================
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")

    try:
        voice_file = await update.message.voice.get_file()
        ogg_path = os.path.join(TEMP_DIR, f"{user_id}_voice.ogg")
        wav_path = os.path.join(TEMP_DIR, f"{user_id}_voice.wav")

        await voice_file.download_to_drive(ogg_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        AudioSegment.from_ogg(ogg_path).export(wav_path, format="wav")

        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language="ru-RU")

        logging.info(f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}")
        await update.message.reply_text(f"üó£ {text}")

        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        update.message.text = text
        await handle_text(update, context)

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")


# ================== CALLBACK ==================
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

# ================== MAIN ==================
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(CallbackQueryHandler(handle_callback))

    logging.info("üöÄ Aura Assistant –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()


if __name__ == "__main__":
    main()
